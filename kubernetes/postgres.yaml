apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgresql-data
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/volume"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-data-claim
  namespace: eplace
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Source: postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "eplace"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.7.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: postgresql/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-postgresql-init-scripts
  namespace: "eplace"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.7.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  init.sql: |-
    CREATE TABLE IF NOT EXISTS ck_user (
      id uuid PRIMARY KEY,
      username text NOT NULL UNIQUE,
      password text NOT NULL,
      email text NOT NULL UNIQUE,
      enabled boolean NOT NULL DEFAULT TRUE,
      default_locale text DEFAULT 'en',
      meta jsonb NOT NULL DEFAULT '{}'::jsonb,
  
      created timestamp NOT NULL DEFAULT now(),
      created_by uuid NOT NULL,
      last_modified timestamp NOT NULL DEFAULT now(),
      last_modified_by uuid NOT NULL,
  
      ts tsvector GENERATED ALWAYS AS (to_tsvector('english', username)) STORED
    );
    CREATE INDEX IF NOT EXISTS ts_user_idx ON ck_user USING GIN (ts);
    CREATE TABLE IF NOT EXISTS ck_canvas (
      id uuid PRIMARY KEY,
      user_id uuid REFERENCES ck_user ON DELETE CASCADE,
      name text NOT NULL DEFAULT 'Untitled',
      size int NOT NULL DEFAULT 20,
      timer int NOT NULL DEFAULT 0,
      private boolean NOT NULL DEFAULT false,
      img text NOT NULL DEFAULT '/canvas/0?type=png',
      meta jsonb NOT NULL DEFAULT '{}'::jsonb,
  
      created timestamp NOT NULL DEFAULT now(),
      created_by uuid NOT NULL,
      last_modified timestamp NOT NULL DEFAULT now(),
      last_modified_by uuid NOT NULL,
  
      ts tsvector GENERATED ALWAYS AS (to_tsvector('english', name)) STORED
    );
    CREATE INDEX IF NOT EXISTS ts_canvas_idx ON ck_canvas USING GIN (ts);
    CREATE TABLE IF NOT EXISTS ck_canvas_sub (
      user_id uuid REFERENCES ck_user ON DELETE CASCADE,
      canvas_id uuid REFERENCES ck_canvas ON DELETE CASCADE
    );
---
# Source: postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-hl
  namespace: "eplace"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.7.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "eplace"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.7.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "eplace"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.7.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: release-name-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.7.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "eplace"
                topologyKey: kubernetes.io/hostname
              weight: 1
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/bitnami-shell:11-debian-11-r24
          imagePullPolicy: "IfNotPresent"
          resources:
            limits: {}
            requests: {}
          command:
            - /bin/sh
            - -ec
            - |
              chown 1001:1001 /bitnami/postgresql
              mkdir -p /bitnami/postgresql/data
              chmod 700 /bitnami/postgresql/data
              find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name "conf" -not -name ".snapshot" -not -name "lost+found" | \
                xargs -r chown -R 1001:1001
              chmod -R 777 /dev/shm
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
            - name: dshm
              mountPath: /dev/shm
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.5.0-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgres-password
            - name: POSTGRES_DB
              value: "postgres"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -d "dbname=postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: custom-init-scripts
          configMap:
            name: release-name-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          persistentVolumeClaim:
            claimName: postgresql-data-claim
